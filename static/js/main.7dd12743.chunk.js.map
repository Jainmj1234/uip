{"version":3,"sources":["serviceWorker.js","firebase/index.js","components/ImageUpload.js","components/ImageDisplay.js","components/statusProcess.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","storage","ImageUpload","props","handleChange","e","target","files","image","setState","handleUpload","state","ref","put","on","snapshot","progress","Math","round","bytesTransferred","totalBytes","error","console","log","child","getDownloadURL","then","url","responseCode","bind","handleApi","axios","get","response","data","this","status","to","type","className","onChange","onClick","style","width","src","alt","height","Component","ImageDisplay","grayworld","gama","unsharp","final","getImage","catch","React","statusProcess","success","rootRef","database","subStatus","subSuccess","snap","val","map","item","key","App","path","exact","component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7dd12743.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import firebase from \"firebase\";\nimport 'firebase/storage';\n\n\n\n  // Your web app's Firebase configuration\n  var firebaseConfig = {\n    apiKey: \"AIzaSyDMDJno-ap304p-DRvyXki6NyfC25PmRNE\",\n    authDomain: \"image-processing-8a3a4.firebaseapp.com\",\n    databaseURL: \"https://image-processing-8a3a4.firebaseio.com\",\n    projectId: \"image-processing-8a3a4\",\n    storageBucket: \"image-processing-8a3a4.appspot.com\",\n    messagingSenderId: \"749621837083\",\n    appId: \"1:749621837083:web:463211b48f16e1d6ec27be\",\n    measurementId: \"G-C6CSE36B25\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n\n  const storage = firebase.storage();\n\n  export{\n  \tstorage, firebase as default\n  }","import React, { Component } from 'react';\nimport {storage} from '../firebase';\nimport './ImageUpload.css';\nimport axios from 'axios'; \nimport { Redirect } from 'react-router-dom'\n\nclass ImageUpload extends Component{\n\tconstructor(props){\n\tsuper(props);\n\tthis.state = { \n\timage : null,\n\turl : '',\n\tprogress : 0,\n\tresponseCode : 0\n\t}\n\tthis.handleChange = this.handleChange.bind(this);\n\tthis.handleUpload = this.handleUpload.bind(this);\n\tthis.handleApi = this.handleApi.bind(this);\n\t}\n\n\thandleChange = e => {\n\tif(e.target.files[0]){\n\tconst image = e.target.files[0];\n\tthis.setState(() => ({image})); \n\t}\n\t}\n\thandleUpload = () => {\n\tconst {image} = this.state;\n   const uploadTask = storage.ref('images/input.jpg').put(image);\n   uploadTask.on('state_changed',\n   (snapshot) => {\n//progress\nconst progress = Math.round((snapshot.bytesTransferred / snapshot.totalBytes) * 100);\nthis.setState({progress})\n   },\n   (error) =>{\n   //error\n   console.log(error);\n   },\n   () => {\n//complete\nstorage.ref('images').child('input.jpg').getDownloadURL().then(url => {\n\tconsole.log(url);\n\tthis.setState({url});\n})\n   });\n\t}\n\nasync handleApi() {\n    const url = \"http://uip.pythonanywhere.com/process\";\n  // fetch data from a url endpoint\n  const response = await axios.get(url);\n  const data =  await response;\n  this.setState({responseCode: data.status});\n}\n\n\n\trender(){\n    if (this.state.responseCode === 200) {\n    return <Redirect to='/ImageDisplay' />\n  }\n\treturn (\n      <div>\n      <h1> UnderWater Image Processing & Object Detection </h1>\n      <input type = \"file\" className = \"fileInput\" onChange = {this.handleChange}/>\n      <button className=\"submitButton\" onClick = {this.handleUpload}>Upload</button>\n      <button className=\"submitButton\" onClick = {this.handleApi}>Start Processing</button>\n      <br/>\n      <div className=\"progress\">\n\t  <div className=\"bar\" style={{width: `${this.state.progress}%`}}>\n\t  <p className=\"percent\">{this.state.progress}%</p>\n\t  </div>\n      </div>\n      <br/>\n      <div className=\"imgPreview\">\n      <img src = {this.state.url  || 'https://dummyimage.com/500x300/ffffff/000000.jpg&text=No+Image+Uploaded'}  alt=\"Uploaded\" height=\"300\" width=\"400\"/>\n      </div>\n      </div>\n\t )\n\t}\n}\n\nexport default ImageUpload;","import React from 'react';\nimport {storage} from '../firebase';\nimport './ImageDisplay.css';\n\n\nclass ImageDisplay extends React.Component {\n  constructor () {\n    super()\n    this.state = {\n      grayworld: '',\n      gama: '',\n      unsharp: '',\n      final: ''\n    }\n    \n    this.getImage('grayworld')\n    this.getImage('gama')\n    this.getImage('unsharp')\n    this.getImage('final')\n  }\n  \n  getImage (image) {\n    let { state } = this\n    storage.ref('images').child(`${image}.jpg`).getDownloadURL().then((url) => {\n      state[image] = url\n      this.setState(state)\n    }).catch((error) => {\n      // Handle any errors\n    })\n  }\n\n  render() {\n    return (\n<div>\n      <h2>Generated Outputs</h2>\n       <div className = \"dispImg\">\n        <h3>Red Compensated</h3>\n        <img src={ this.state.grayworld } alt=\"\" />\n        </div>\n        <div className = \"dispImg\">\n        <h3>Gamma Corrected</h3>\n        <img src={ this.state.gama } alt=\"\" />\n        </div>\n        <div className = \"dispImg\">\n        <h3>Sharpened Image</h3>\n        <img src={ this.state.unsharp } alt=\"\" />\n        </div>\n        <div className = \"dispImg\">\n        <h3>Final Result</h3>\n        <img src={ this.state.final } alt=\"\" />\n        </div>\n</div>\n    );\n  }\n}\n\nexport default ImageDisplay;","import React from 'react';\nimport  firebase  from '../firebase'\nimport { Redirect } from 'react-router';\nimport './statusProcess.css'\n\nclass statusProcess extends React.Component{\n\nconstructor(){\n\tsuper();\n\tthis.state = {\n\t\tstatus : [],\n\t\tsuccess : 0\n\t};\n\n}\ncomponentDidMount(){\n\tconst rootRef = firebase.database().ref().child('uip');\n\tconst subStatus = rootRef.child('status');\n\tconst subSuccess = rootRef.child('success');\n\tsubStatus.on('value', snap => {\n\t\tthis.setState({\n\t\t\tstatus : [...this.state.status, snap.val()]\n\t\t});\n\t});\n\t\tsubSuccess.on('value', snap => {\n\t\tthis.setState({\n\t\t\tsuccess : snap.val()\n\t\t});\n\t});\n\t}\n\n\n\n\trender(){\n\t\t\tif (this.state.success === 200){\n\t\t\t\treturn <Redirect to='/ImageDisplay' />;\n\t\t\t}\n\t\treturn(\n\t\t<div>\n        <ul>\n          {this.state.status.map(item => (\n            <li key={item}>{item}</li>\n          ))}\n        </ul>\n      </div>\n\t\t);\n\t};\n}\n\nexport default statusProcess;","import React from 'react';\nimport './App.css';\nimport ImageUpload from './components/ImageUpload';\nimport ImageDisplay from './components/ImageDisplay';\nimport statusProcess from './components/statusProcess';\nimport { BrowserRouter as Router, Switch, Route} from 'react-router-dom'\n\nfunction App() {\n  return (\n    <Router>\n    <Switch>\n    <div className= 'App'>\n    <ImageUpload />\n    <Route path='/' exact component={statusProcess} />\n    <Route path='/ImageDisplay' component={ImageDisplay} />\n    </div>\n    </Switch>\n    </Router>\n    );\n  }\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}